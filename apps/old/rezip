#!/usr/bin/env python3

import argparse
import logging
import tempfile
import pathlib
import gzip
import shutil
import os
from subprocess import Popen,PIPE

from pymongo import MongoClient

from covis_db.db import CovisDB
import covis_worker.rezip


parser = argparse.ArgumentParser()
parser.add_argument('infile', nargs='*',
                    help="Basenames to process")

parser.add_argument('--log', nargs='?', default='INFO',
                    help='Logging level')

parser.add_argument('--dbhost', default='localhost', help='Hostname of MongoDB host')

parser.add_argument('--dry-run', dest='dry_run', action='store_true',
                    help='Do not actually rezip the file')

parser.add_argument('--tempdir', help='Working directory')

parser.add_argument('--desthost', help='')

#parser.add_argument('--outdir', default='.', help="Output directory")

args = parser.parse_args()

logging.basicConfig(level=args.log.upper())


db = CovisDB(MongoClient(args.dbhost))
if not db:
    print("Unable to contact Mongodb at %s" % args.dbhost)
    exit(-1)


for basename in args.infile:
    logging.info("Looking up basename %s" % basename)

    result = db.find(basename=basename)

    if not result:
        logging.error("Unable to find basename %s" % basename)
        continue

    workdir = args.tempdir
    if not workdir:
        workdir = tempfile.TemporaryDirectory().name

    # Calculate output filename
    outfile = pathlib.Path(workdir, basename+".tar.7z")

    # Determine which source to use
    raw = result.raw[0]
    print(raw)

    accessor = raw.accessor()
    # accessor.hostname = "localhost"

    if not accessor:
        print("Unable to get file %s" % basename)
        continue

    r = accessor.reader()
    logging.info(r.info())

    if args.dry_run:
        continue

    # Remove existing destination file
    if os.path.isfile(outfile):
        logging.warning("Removing existing file")
        os.remove(outfile)

    command = ["7z", "a", "-si", "-y", outfile]
    with Popen(command, stdin=PIPE) as process:
        with gzip.GzipFile(fileobj=r) as data:
            shutil.copyfileobj(data, process.stdin)

    # Check the results
    command = ["7z", "t", outfile]
    child = Popen(command)
    child.wait()

    # Upload
    if args.desthost:
        logging.info("Uploading to destination host %s" % args.desthost)

    if child.returncode != 0:
        logging.error("7z test on file %s has non-zero return value" % outfile)
        continue
